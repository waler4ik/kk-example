// Code generated by kk; DO NOT EDIT.

package errors

import (
	"net/http"

	"github.com/go-chi/render"
)

type ErrResponse struct {
	HTTPStatusCode int `json:"-"`

	StatusText string `json:"status"`
	ErrorText  string `json:"error,omitempty"`
}

func (e *ErrResponse) Render(w http.ResponseWriter, r *http.Request) error {
	render.Status(r, e.HTTPStatusCode)
	return nil
}

func Err(statusCode int, err error) render.Renderer {
	return &ErrResponse{
		HTTPStatusCode: statusCode,
		StatusText:     http.StatusText(statusCode),
		ErrorText:      err.Error(),
	}
}

func ErrRender(err error) render.Renderer {
	statusCode := http.StatusUnprocessableEntity
	return &ErrResponse{
		HTTPStatusCode: statusCode,
		StatusText:     http.StatusText(statusCode),
		ErrorText:      err.Error(),
	}
}

func ErrBadRequest(err error) render.Renderer {
	statusCode := http.StatusBadRequest
	return &ErrResponse{
		HTTPStatusCode: statusCode,
		StatusText:     http.StatusText(statusCode),
		ErrorText:      err.Error(),
	}
}

func ErrInternalServerError(err error) render.Renderer {
	statusCode := http.StatusInternalServerError
	return &ErrResponse{
		HTTPStatusCode: statusCode,
		StatusText:     http.StatusText(statusCode),
		ErrorText:      err.Error(),
	}
}

var ErrNotFound = &ErrResponse{HTTPStatusCode: http.StatusNotFound, StatusText: http.StatusText(http.StatusNotFound)}
